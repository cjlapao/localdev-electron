// Generated by https://quicktype.io

export interface Settings {
  system: System;
  cluster: Cluster;
  globalValues: GlobalValue[];
  namespaces: Namespace[];
  defaultAddons: string[];
  extraKubernetesServices: ExtraKubernetesService[];
  azure: AzureServicePrincipal[];
  docker: SettingsDocker;
  neurons: Neurons;
  localComponents: LocalComponent[];
  monitoring: Monitoring;
  istio: IstioSettings;
}

export interface AzureServicePrincipal {
  tenantId: string;
  subscriptionId: string;
  subscriptionName: string;
  applicationId: string;
  applicationName: string;
  applicationPassword: string;
}

export interface Cluster {
  cpusNumber: string;
  memorySize: string;
  diskSize: string;
  ethernetName: string;
  createExternalSwitch: boolean;
  defaultNamespace: string;
  startTunnelAutomatically: boolean;
  vSwitchName: string;
}

export interface SettingsDocker {
  registries: Registry[];
}

export interface Registry {
  name: string;
  url: string;
  username: string;
  password: string;
}

export interface GlobalValue {
  name: string;
  value: string;
}

export interface ExtraKubernetesService {
  id: string;
  name: string;
  helm: Helm;
}

export interface IstioSettings {
  namespace: string;
  enableKiali: boolean;
  enableJaeger: boolean;
}

export interface LocalComponent {
  name: string;
  srcPath: string;
  services: LocalComponentService[];
  helm: Helm;
  terraform?: Terraform[];
}

export interface Helm {
  name: string;
  path: string;
  chartValueFile?: HelmChartValue[];
}

export interface HelmChartValue {
  key: string;
  value: string | HelmChartValue;
}

export interface DockerImages {
  backendServiceImageWithTags: string;
  webhostServiceImageWithTags: string;
  publisherWebhostServiceImageWithTags: string;
}

export interface EMS {
  environmentApiKey?: string;
  apiUrl: string;
  apiKey?: string;
}

export interface PurpleEnvironment {
  commonPublicApiHost: string;
  protocol: string;
  baseUrl?: string;
  lcmApiUrl?: string;
  afsLandscape?: string;
  agentManifestHost?: string;
}

export interface Identity {
  certificateSignature: string;
}

export interface LaunchDarkly {
  apiKey: string;
  baseUrl: string;
  environmentName: string;
  projectsEndpoint: string;
}

export interface PurpleLocal {
  enabled: boolean;
  createNamespace: boolean;
  hostname: string;
  istioGatewayName: string;
  istioGatewayNamespace: string;
}

export interface NonProd {
  local?: boolean;
  createNamespace: boolean;
  createImageSecret: boolean;
  hostname?: string;
  istioGatewayName?: string;
  istioGatewayNamespace?: string;
  dockerRegistry?: string;
  imagePullUsername?: string;
  imagePullPassword?: string;
  kedaSupport?: boolean;
  createVirtualService?: boolean;
}

export interface Saas {
  landscape: string;
  encryptionKey: string;
  mongoDbReadConnectionString: string;
  mongoDbReadWriteConnectionString: string;
  mongoDbAdminConnectionString: string;
}

export interface StorageAccountConnectionStrings {
  discoAgent: string;
}

export interface LocalComponentService {
  name: string;
  docker: ServiceDocker;
}

export interface ServiceDocker {
  dockerFile: string;
  imageName: string;
  tag?: string;
  repository?: string;
  buildContext?: string;
  buildArguments: string[];
}

export interface Terraform {
  name: string;
  terraformExecutable: string;
  modulePath: string;
  variableFiles: string[];
  outputVariables: boolean;
  plan: boolean;
  azure: TerraformAzure;
  autoApprove?: boolean;
}

export interface TerraformAzure {
  tenantId: string;
  subscriptionId: string;
  applicationId: string;
  applicationPassword: string;
  tfstateBackend?: TfstateBackend;
}

export interface TfstateBackend {
  createResources: boolean;
  enabled: boolean;
  region: string;
  resourceGroupName: string;
  storageAccountName: string;
  containerName: string;
  tfStateName: string;
}

export interface Monitoring {
  deployPrometheus: boolean;
  name: string;
  chartValueFile?: Helm;
}

export interface Namespace {
  name: string;
  injectSidecar: boolean;
}

export interface Neurons {
  services: NeuronsService[];
}

export interface NeuronsService {
  installOnStartup: boolean;
  name: string;
  registry: string;
  namespace: string;
  chartValueFile: Helm;
}

export interface System {
  keepLastBackups: number;
  retry: number;
}
